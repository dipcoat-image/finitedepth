.. _document:

Documentation
=============

.. currentmodule:: finitedepth

Documentation are used to be in numpy-style, but it is now being transitioned
into google-style as it binds better with sphinx-autoapi.

To generate document, go to ``doc`` directory and build html files.

.. code-block:: bash

    $ cd doc
    $ make html

Documents will be generated in ``doc/build/html`` directory.
``index.html`` file will lead you to main page.

Docstring policy
----------------

Docstrings are designed to show optimum result for both :func:`help` and
:mod:`autoapi`.

The biggest difference between the two features is that the former cannot
show docstrings for instances/attributes but the latter can. For example:

.. code-block:: python

    class Foo:
        """Docstring for Foo."""
        bar = 1
        """Docstring for bar."""

    foo = Foo()
    """Docstring for foo."""

Documentation generated by :mod:`autoapi` with this code can show every
docstring. However, ``help(foo)`` will just show the docstring of ``Foo``
and ``help(Foo.bar)`` will show docstring of :obj:`int`.

Therefore docstrings are meticulously written with the following rule:

#. Classes/modules must have documentation for its attributes.
    This way, ``help(Foo)`` will explain ``Foo.bar``.
    Similary, ``foo`` will be explained by its module docstring.
#. Docstrings only for :mod:`autoapi` should be kept to minimum.
    We don't want to remove them because they provide useful links.
    For example, we keep docstring for ``Foo.bar`` but it is mainly documented
    in ``Foo``.
#. No redundancy.
    For example, :attr:`RectSubstrate.SidesNum` has value ``4``, which is
    automatically shown in documentation. We don't need to write something like
    ``"SidesNum has value 4"`` anywhere.

Class constructors
------------------

Documentation policy for class constructors (:obj:`~object.__new__` and
:obj:`~object.__init__`) deserve its own justification.

If user sees their docstrings, it means that they intentionally ran
``help(Foo.__init__)``. Surely they have already ran ``help(Foo)`` to read
about what parameters does the class takes and what they mean.
Therefore the class constructor docstrings does not need to explain the
significance of their parameters; instead, describe what they do to them.

Class constructors are not included in :mod:`autoapi` documentation because
it makes the output too verbose.
